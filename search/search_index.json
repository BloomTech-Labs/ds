{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Labs DS Phases Meet with your Labs DS manager to approve your work from each phase: Planning First 1-2 sprints Contribute to Product Vision Document Identify user problems that DS can help solve Audit your data Choose DS problem(s) to work on Cycle 1: Data + Baseline Next 2-3 sprints Get data, wrangle it Define how you'll measure success Begin with baselines Deploy baseline API Cycle 2: Model + Deploy Through sprint 7 Develop models iteratively Plot your progress Deploy model API Cycle 3: Iterate If time allows Add another user feature Or, iterate on your current feature(s) Documentation + Presentation Last sprint API documentation Architecture diagram Notebooks PEP8 Video/slides","title":"Labs DS Phases"},{"location":"#labs-ds-phases","text":"Meet with your Labs DS manager to approve your work from each phase:","title":"Labs DS Phases"},{"location":"#planning","text":"First 1-2 sprints Contribute to Product Vision Document Identify user problems that DS can help solve Audit your data Choose DS problem(s) to work on","title":"Planning"},{"location":"#cycle-1-data-baseline","text":"Next 2-3 sprints Get data, wrangle it Define how you'll measure success Begin with baselines Deploy baseline API","title":"Cycle 1: Data + Baseline"},{"location":"#cycle-2-model-deploy","text":"Through sprint 7 Develop models iteratively Plot your progress Deploy model API","title":"Cycle 2: Model + Deploy"},{"location":"#cycle-3-iterate","text":"If time allows Add another user feature Or, iterate on your current feature(s)","title":"Cycle 3: Iterate"},{"location":"#documentation-presentation","text":"Last sprint API documentation Architecture diagram Notebooks PEP8 Video/slides","title":"Documentation + Presentation"},{"location":"baseline/","text":"Cycle 1: Data + Baseline Get data, wrangle it Terms of service, webpages, APIs Google, People + AI Guidebook, Data Collection + Evaluation https://pair.withgoogle.com/chapter/data-collection/ Define how you'll measure success Google, People + AI Guidebook, User Needs + Defining Success, Design & evaluate the reward function https://pair.withgoogle.com/chapter/user-needs/#section3 Begin with baselines EFF ... Recommended: Deploy baseline API How do Lambda students get AWS access?","title":"Cycle 1: Data + Baseline"},{"location":"baseline/#cycle-1-data-baseline","text":"","title":"Cycle 1: Data + Baseline"},{"location":"baseline/#get-data-wrangle-it","text":"Terms of service, webpages, APIs Google, People + AI Guidebook, Data Collection + Evaluation https://pair.withgoogle.com/chapter/data-collection/","title":"Get data, wrangle it"},{"location":"baseline/#define-how-youll-measure-success","text":"Google, People + AI Guidebook, User Needs + Defining Success, Design & evaluate the reward function https://pair.withgoogle.com/chapter/user-needs/#section3","title":"Define how you'll measure success"},{"location":"baseline/#begin-with-baselines","text":"EFF ...","title":"Begin with baselines"},{"location":"baseline/#recommended-deploy-baseline-api","text":"How do Lambda students get AWS access?","title":"Recommended: Deploy baseline API"},{"location":"bigdata/","text":"Big Data What if your data doesn\u2019t fit in memory? My advice: Try to \u201cscale up\u201d (use a server with more memory) before you try to \u201cscale out\u201d (use distributed computing frameworks). If you\u2019re looking at frameworks, try something lightweight like Dask before something heavy-duty like Spark. If you\u2019re fitting models, figure out whether more data is actually useful: Read \"More data or better models?\" by Xavier Amatriain, based on his experience leading ML Engineering at Netflix. Read about Learning curves in Scikit-Learn in Python Data Science Handbook by Jake VanderPlas. Then, decide whether to use a smaller sample that does fit in memory, or, try \u201cincremental learning\u201d in scikit-learn or Dask .","title":"Big Data"},{"location":"bigdata/#big-data","text":"What if your data doesn\u2019t fit in memory? My advice: Try to \u201cscale up\u201d (use a server with more memory) before you try to \u201cscale out\u201d (use distributed computing frameworks). If you\u2019re looking at frameworks, try something lightweight like Dask before something heavy-duty like Spark. If you\u2019re fitting models, figure out whether more data is actually useful: Read \"More data or better models?\" by Xavier Amatriain, based on his experience leading ML Engineering at Netflix. Read about Learning curves in Scikit-Learn in Python Data Science Handbook by Jake VanderPlas. Then, decide whether to use a smaller sample that does fit in memory, or, try \u201cincremental learning\u201d in scikit-learn or Dask .","title":"Big Data"},{"location":"cycle1/","text":"Cycle 1: Data + Baseline Get data, wrangle it Resources Google People + AI Guidebook: Data Collection + Evaluation Data analysis checklist Define how you'll measure success Resources Google, People + AI Guidebook: User Needs + Defining Success: Design & evaluate the reward function Begin with baselines In Cycle 1, you're required to start making a chart like this. Label the axes, with time on the x-axis, and your evaluation metric on the y-axis. Then plot the red horizontal lines, representing baselines and user expectations. This will prepare you for Cycle 2, when you will track your team's progress like how the EFF tracks AI research progress , with a datapoint for each of your iterations. Deploy baseline API * Recommended in cycle 1 for Labs 23, required for Labs 24 Resources Always start with a stupid model, no exceptions FastAPI videos , #1\u20145.","title":"Cycle 1: Data + Baseline"},{"location":"cycle1/#cycle-1-data-baseline","text":"","title":"Cycle 1: Data + Baseline"},{"location":"cycle1/#get-data-wrangle-it","text":"Resources Google People + AI Guidebook: Data Collection + Evaluation Data analysis checklist","title":"Get data, wrangle it"},{"location":"cycle1/#define-how-youll-measure-success","text":"Resources Google, People + AI Guidebook: User Needs + Defining Success: Design & evaluate the reward function","title":"Define how you'll measure success"},{"location":"cycle1/#begin-with-baselines","text":"In Cycle 1, you're required to start making a chart like this. Label the axes, with time on the x-axis, and your evaluation metric on the y-axis. Then plot the red horizontal lines, representing baselines and user expectations. This will prepare you for Cycle 2, when you will track your team's progress like how the EFF tracks AI research progress , with a datapoint for each of your iterations.","title":"Begin with baselines"},{"location":"cycle1/#deploy-baseline-api","text":"* Recommended in cycle 1 for Labs 23, required for Labs 24 Resources Always start with a stupid model, no exceptions FastAPI videos , #1\u20145.","title":"Deploy baseline API"},{"location":"cycle2/","text":"Cycle 2: Model + Deploy Develop models iteratively, plot your progress In Cycle 2, your team must plot your progress, like how the EFF tracks AI research progress \u2014 with time on the x-axis, an evaluation metric on the y-axis, and a datapoint for each attempt, compared to some baseline: We care less about the end result (how high the metric goes at the end of the project) and more about the effort rate (how many attempts are made to iterate early). Your line's slope measures your learning rate. Deploy model API FastAPI FastAPI is an alternative to Flask. It gives you \"automatic interactive API documentation.\" repo docs screencasts Porting Flask to FastAPI for ML Model Serving Resources by Lambda students Elizabeth Ter Sahakyan, Create An API To Deploy Machine Learning Models Using Flask and Heroku Marvin Davila, Deploying a Flask App to AWS Elastic Beanstalk Marvin Davila, How to Create an AWS Lambda Function in Cloud9 Marvin Davila, How to Rate Limit Routes in Flask Quinn Dougherty, Build Week Survival Guide: Data Engineering Udemy course Soledad Galli, Deployment of Machine Learning Models (8 hours of videos, $12)","title":"Cycle 2: Model + Deploy"},{"location":"cycle2/#cycle-2-model-deploy","text":"","title":"Cycle 2: Model + Deploy"},{"location":"cycle2/#develop-models-iteratively-plot-your-progress","text":"In Cycle 2, your team must plot your progress, like how the EFF tracks AI research progress \u2014 with time on the x-axis, an evaluation metric on the y-axis, and a datapoint for each attempt, compared to some baseline: We care less about the end result (how high the metric goes at the end of the project) and more about the effort rate (how many attempts are made to iterate early). Your line's slope measures your learning rate.","title":"Develop models iteratively, plot your progress"},{"location":"cycle2/#deploy-model-api","text":"","title":"Deploy model API"},{"location":"cycle2/#fastapi","text":"FastAPI is an alternative to Flask. It gives you \"automatic interactive API documentation.\" repo docs screencasts Porting Flask to FastAPI for ML Model Serving","title":"FastAPI"},{"location":"cycle2/#resources-by-lambda-students","text":"Elizabeth Ter Sahakyan, Create An API To Deploy Machine Learning Models Using Flask and Heroku Marvin Davila, Deploying a Flask App to AWS Elastic Beanstalk Marvin Davila, How to Create an AWS Lambda Function in Cloud9 Marvin Davila, How to Rate Limit Routes in Flask Quinn Dougherty, Build Week Survival Guide: Data Engineering","title":"Resources by Lambda students"},{"location":"cycle2/#udemy-course","text":"Soledad Galli, Deployment of Machine Learning Models (8 hours of videos, $12)","title":"Udemy course"},{"location":"cycle3/","text":"Cycle 3: Iterate You don't have to complete cycle 3, but you do have to plan for it. To complete Labs, you must complete 2 product cycles. But, you must plan 3 release canvases. The release canvas is your planning document for a product cycle. Add another user feature You can go back to the beginning with a new user feature. Choose a new DS problem to work on and work on cycle 1 tasks. Or, iterate on your current feature(s) You can continue with your current user feature(s). Iterate on cycle 2 tasks to improve your product. Don't forget about documentation + presentation too!","title":"Cycle 3: Iterate"},{"location":"cycle3/#cycle-3-iterate","text":"You don't have to complete cycle 3, but you do have to plan for it. To complete Labs, you must complete 2 product cycles. But, you must plan 3 release canvases. The release canvas is your planning document for a product cycle.","title":"Cycle 3: Iterate"},{"location":"cycle3/#add-another-user-feature","text":"You can go back to the beginning with a new user feature. Choose a new DS problem to work on and work on cycle 1 tasks.","title":"Add another user feature"},{"location":"cycle3/#or-iterate-on-your-current-features","text":"You can continue with your current user feature(s). Iterate on cycle 2 tasks to improve your product. Don't forget about documentation + presentation too!","title":"Or, iterate on your current feature(s)"},{"location":"deployment/","text":"Deployment Architecture You will design and document your architecture to deploy your model and integrate it into your product. For example: Labs 17 Cryptolytic architecture (diagram made with Lucidchart ) Labs 19 Tally AI architecture (diagram made with Figma ) FastAPI FastAPI is an alternative to Flask. It gives you \"automatic interactive API documentation.\" repo docs screencasts Porting Flask to FastAPI for ML Model Serving Resources Lambda students Elizabeth Ter Sahakyan, Create An API To Deploy Machine Learning Models Using Flask and Heroku Marvin Davila, Deploying a Flask App to AWS Elastic Beanstalk Marvin Davila, How to Create an AWS Lambda Function in Cloud9 Marvin Davila, How to Rate Limit Routes in Flask Quinn Dougherty, Build Week Survival Guide: Data Engineering Third party Soledad Galli, Deployment of Machine Learning Models (Udemy course, 8 hours of videos, $12)","title":"Deployment"},{"location":"deployment/#deployment","text":"","title":"Deployment"},{"location":"deployment/#architecture","text":"You will design and document your architecture to deploy your model and integrate it into your product. For example: Labs 17 Cryptolytic architecture (diagram made with Lucidchart ) Labs 19 Tally AI architecture (diagram made with Figma )","title":"Architecture"},{"location":"deployment/#fastapi","text":"FastAPI is an alternative to Flask. It gives you \"automatic interactive API documentation.\" repo docs screencasts Porting Flask to FastAPI for ML Model Serving","title":"FastAPI"},{"location":"deployment/#resources","text":"","title":"Resources"},{"location":"deployment/#lambda-students","text":"Elizabeth Ter Sahakyan, Create An API To Deploy Machine Learning Models Using Flask and Heroku Marvin Davila, Deploying a Flask App to AWS Elastic Beanstalk Marvin Davila, How to Create an AWS Lambda Function in Cloud9 Marvin Davila, How to Rate Limit Routes in Flask Quinn Dougherty, Build Week Survival Guide: Data Engineering","title":"Lambda students"},{"location":"deployment/#third-party","text":"Soledad Galli, Deployment of Machine Learning Models (Udemy course, 8 hours of videos, $12)","title":"Third party"},{"location":"documentation/","text":"Documentation + Presentation API documentation FastAPI is recommended because it gives you \"automatic interactive API documentation\"! Architecture diagram You will design and document your architecture to deploy your model and integrate it into your product. For example: Labs 17 Cryptolytic architecture (diagram made with Lucidchart ) Labs 19 Tally AI architecture (diagram made with Figma ) Notebooks Jupyter Notebook Best Practices for Data Science PEP8 How to Write Beautiful Python Code With PEP 8 The Elements of Python Style Video/slides Labs 20\u2019s top 2 products were DS cross-functional. See for yourself! Trash Panda: app , repo , video Sound Drip: app , repo , video Labs 12 was the first cohort with DS! Larkist video Follow this advice: How to give a perfect demo","title":"Documentation + Presentation"},{"location":"documentation/#documentation-presentation","text":"","title":"Documentation + Presentation"},{"location":"documentation/#api-documentation","text":"FastAPI is recommended because it gives you \"automatic interactive API documentation\"!","title":"API documentation"},{"location":"documentation/#architecture-diagram","text":"You will design and document your architecture to deploy your model and integrate it into your product. For example: Labs 17 Cryptolytic architecture (diagram made with Lucidchart ) Labs 19 Tally AI architecture (diagram made with Figma )","title":"Architecture diagram"},{"location":"documentation/#notebooks","text":"Jupyter Notebook Best Practices for Data Science","title":"Notebooks"},{"location":"documentation/#pep8","text":"How to Write Beautiful Python Code With PEP 8 The Elements of Python Style","title":"PEP8"},{"location":"documentation/#videoslides","text":"Labs 20\u2019s top 2 products were DS cross-functional. See for yourself! Trash Panda: app , repo , video Sound Drip: app , repo , video Labs 12 was the first cohort with DS! Larkist video Follow this advice: How to give a perfect demo","title":"Video/slides"},{"location":"examples/","text":"Examples Labs 20 Labs 20\u2019s top 2 products were DS cross-functional. See for yourself! Trash Panda: app , repo , video Sound Drip: app , repo , video Labs 12 Labs 12 was the first cohort with DS! Larkist video","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#labs-20","text":"Labs 20\u2019s top 2 products were DS cross-functional. See for yourself! Trash Panda: app , repo , video Sound Drip: app , repo , video","title":"Labs 20"},{"location":"examples/#labs-12","text":"Labs 12 was the first cohort with DS! Larkist video","title":"Labs 12"},{"location":"expectations/","text":"Expectations Contribute daily Success starts with showing up. Are you showing up to participate with your team, on Slack, Zoom, and GitHub? Do you have something to show for your work, some tangible artifact, each day? This doesn't have to be just production code. For example, documentation is valuable, such as a data dictionary, with definitions, assumptions, and metadata. Jupyter notebooks with exploratory analysis are helpful to learn about the data and refine project plans. Regardless of the work format, it should be committed to GitHub or Notion. To help teams review and troubleshoot their work, we need to be able to see it in central repositories. Machine Learning will be less than 50% of your time (but should be more than 0%) See Monica Rogati's diagram from her blog post, The AI Hierarchy of Needs :","title":"Expectations"},{"location":"expectations/#expectations","text":"","title":"Expectations"},{"location":"expectations/#contribute-daily","text":"Success starts with showing up. Are you showing up to participate with your team, on Slack, Zoom, and GitHub? Do you have something to show for your work, some tangible artifact, each day? This doesn't have to be just production code. For example, documentation is valuable, such as a data dictionary, with definitions, assumptions, and metadata. Jupyter notebooks with exploratory analysis are helpful to learn about the data and refine project plans. Regardless of the work format, it should be committed to GitHub or Notion. To help teams review and troubleshoot their work, we need to be able to see it in central repositories.","title":"Contribute daily"},{"location":"expectations/#machine-learning-will-be-less-than-50-of-your-time-but-should-be-more-than-0","text":"See Monica Rogati's diagram from her blog post, The AI Hierarchy of Needs :","title":"Machine Learning will be less than 50% of your time (but should be more than 0%)"},{"location":"labs24-deployment-lesson/","text":"Labs 24 deployment lesson Big picture This tutorial is for online inference with AWS Elastic Beanstalk, FastAPI, and Pipenv. To learn more about batch inference, read Batch Inference vs Online Inference - ML in Production . Develop baseline API in Colab Hello World You don\u2019t have to prototype with Colab, but it is possible! Start your notebook with this cell: !pip install fastapi pyngrok uvicorn Then copy this code from the First Steps - FastAPI tutorial. The simplest FastAPI file could look like this: from fastapi import FastAPI app = FastAPI() @app.get(\"/\") async def root(): return {\"message\": \"Hello World\"} Then end your notebook with the following cell. Your FastAPI app will be up as long as this cell is running. from pyngrok import ngrok import uvicorn url = ngrok.connect(port=8000) print('Public URL:', url) uvicorn.run(app, port=8000) Click the Public URL link: the URL will end with ngrok.io This should open the URL in a new browser tab. You should see {\"message\":\"Hello World\"} In your browser\u2019s URL bar, add /docs to the end of the URL, then press Enter. You should see something like this: To make changes to your FastAPI app: Stop the last cell from running. (The cell with uvicorn.run .) Make your changes to the cell with app = FastAPI() and re-run it. Re-run the last cell with uvicorn.run . Click the new Public URL link that ends with ngrok.io Docstrings, HTML Let\u2019s add a docstring and HTML response to our first endpoint: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI() @app.get(\"/\") async def root(): \"\"\" Verifies the API is deployed, and links to the docs \"\"\" return HTMLResponse(\"\"\" <h1>Fake News Detector API</h1> <p>Go to <a href=\"/docs\">/docs</a> for documentation.</p> \"\"\") Re-launch your app. Go to docs -> GET. POST request endpoint Then add another endpoint, as a POST request: @app.post('/predict') async def predict(): \"\"\" Predicts whether a news article is real or fake news, based on its title Naive baseline: Always predicts 'fake' \"\"\" return { 'prediction': 'fake', 'probability': 0.50 } Re-launch your app. Go to docs -> POST -> Try it out -> Execute. According to FastAPI\u2019s tutorial , When you need to send data from a client (let\u2019s say, a browser) to your API, you send it as a request body . Let\u2019s set this up, following the tutorial instructions. import pandas as pd from pydantic import BaseModel class Story(BaseModel): title: str text: str @app.post('/predict') async def predict(story: Story): \"\"\" Predict whether a news article is real or fake news, based on its title & text Naive baseline: Always predicts 'fake' \"\"\" # Doesn't do anything with the request body yet, # just verifies we can read it. print(story) X = pd.DataFrame([dict(story)]) print(X.to_markdown()) return { 'prediction': 'fake', 'proobability': 0.50 } The code above shows how the request body object can be converted to a dictionary. Then, there are many ways to create Pandas DataFrames from lists and dictionaries . Re-launch your app. Go to docs -> POST -> Try it out -> Execute. Try to change the Request body, then Execute again. The request body is a JSON object, similar to a Python dictionary. What happens if you: Change values? (For example, set title \u2019s value to a different string.) Change value types? (For example, set title \u2019s value to an integer instead of a string.) Add key-value pairs? Remove key-value pairs? Reorder key-value pairs? CORS To ensure your team\u2019s web app can call your API, we\u2019ll configure \u201cCross-Origin Resource Sharing\u201d. According to FastAPI\u2019s tutorial , CORS or \u201cCross-Origin Resource Sharing\u201d refers to the situations when a frontend running in a browser has JavaScript code that communicates with a backend, and the backend is in a different \u201corigin\u201d than the frontend. Add this code to your app, following the tutorial instructions. from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI() app.add_middleware( CORSMiddleware, allow_origins=[\"*\"], allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"], ) Learn more To learn more about FastAPI: Watch these 8 short screencast videos Read the FastAPI docs Read Porting Flask to FastAPI for ML Model Serving Deploy baseline to AWS Get AWS account access See Lambda Labs Student Handbook -> Product Engineering -> How do I request a new AWS account or get access to an existing account? Team Leads can work with Section Leads to request accounts, account access or account permissions. Note! There is only one region available for AWS accounts provided by Lambda School. That region is N. Virginia ( us-east-1 ). Please be sure to always work in that region. If you have permissions issues, please check that you are working in us-east-1. Get AWS access keys Understanding and getting your credentials - AWS General Reference explains, Access keys consist of two parts: an access key ID (for example, AKIAIOSFODNN7EXAMPLE) and a secret access key (for example, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). You use access keys to sign programmatic requests that you make to AWS if you use AWS CLI commands \u2026 To get access keys, follow the instructions in Managing Access Keys for IAM Users - AWS Identity and Access Management Install AWS EB CLI That\u2019s a lot of acronyms! AWS = Amazon Web Services EB = Elastic Beanstalk CLI = Command Line Interface Here\u2019s how I recommend you install AWS EB CLI: pip install pipx pipx ensurepath pipx install awsebcli eb --help I don\u2019t recommend using the AWS EB CLI setup scripts on GitHub , because it didn\u2019t work for me or for some students. Curious about pipx? You can learn more here: pipx docs My Python Development Environment, 2020 Edition | Jacob Kaplan-Moss Make GitHub repo Go to github.com/new to create a new GitHub repo. Give it any name. Check \"Initialize this repository with a README.\" Clone the repo to your local computer and change directories into it. git clone https://github.com/your-user-name/your-repo-name.git cd your-repo-name Make pipenv environment pip install pipenv pipenv install fastapi uvicorn gunicorn pipenv shell Make main.py Make a file named main.py and insert your FastAPI app code. Install more dependencies For example, so far our app uses pandas, plus a library called tabulate (for the to_markdown function). So we need to install these libraries in our virtual environment. pipenv install pandas tabulate Run locally Run this command from the First Steps - FastAPI tutorial. uvicorn main:app --reload In your web browser, go to the URL where the uvicorn web server is running locally. For example, http://127.0.0.1:8000/ Make Procfile Make a file named Procfile and insert this line: web: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker Curious about that Procfile? You can browse these technical references: https://fastapi.tiangolo.com/deployment/#alternatively-deploy-fastapi-without-docker https://www.uvicorn.org/#running-with-gunicorn https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/python-configuration-procfile.html Git commit git add --all git commit -am \"First commit\" git push origin master Deploy on Elastic Beanstalk We saw this message when we ran eb --help : To get started type \u201ceb init\u201d. Then type \u201ceb create\u201d and \u201ceb open\u201d We\u2019re ready to do that now. Use the following options when you run eb init : eb init --platform python-3.7 make-up-your-app-name --region us-east-1 The first time you run eb init , you will be asked for your AWS access key credentials. Then run these two commands: eb create make-up-your-environment-name eb open Congratulations, your baseline API is deployed to AWS! To update your app, push to GitHub, then run eb deploy . Clean up If you deploy an app just for testing or learning, don\u2019t forget to \u201cclean up\u201d, to avoid surprise bills. The AWS Elastic Beanstalk docs explain, To ensure that you\u2019re not charged for any services you aren\u2019t using, delete all application versions and terminate the environment. Follow the instructions in the docs ! Develop & deploy model Continue with this Colab notebook to develop a real model. Then pickle the model and use pipenv to install exact version numbers of all new dependencies. Test the app locally. Then push to GitHub, and run eb deploy .","title":"Labs 24 deployment lesson"},{"location":"labs24-deployment-lesson/#labs-24-deployment-lesson","text":"","title":"Labs 24 deployment lesson"},{"location":"labs24-deployment-lesson/#big-picture","text":"This tutorial is for online inference with AWS Elastic Beanstalk, FastAPI, and Pipenv. To learn more about batch inference, read Batch Inference vs Online Inference - ML in Production .","title":"Big picture"},{"location":"labs24-deployment-lesson/#develop-baseline-api-in-colab","text":"","title":"Develop baseline API in Colab"},{"location":"labs24-deployment-lesson/#hello-world","text":"You don\u2019t have to prototype with Colab, but it is possible! Start your notebook with this cell: !pip install fastapi pyngrok uvicorn Then copy this code from the First Steps - FastAPI tutorial. The simplest FastAPI file could look like this: from fastapi import FastAPI app = FastAPI() @app.get(\"/\") async def root(): return {\"message\": \"Hello World\"} Then end your notebook with the following cell. Your FastAPI app will be up as long as this cell is running. from pyngrok import ngrok import uvicorn url = ngrok.connect(port=8000) print('Public URL:', url) uvicorn.run(app, port=8000) Click the Public URL link: the URL will end with ngrok.io This should open the URL in a new browser tab. You should see {\"message\":\"Hello World\"} In your browser\u2019s URL bar, add /docs to the end of the URL, then press Enter. You should see something like this: To make changes to your FastAPI app: Stop the last cell from running. (The cell with uvicorn.run .) Make your changes to the cell with app = FastAPI() and re-run it. Re-run the last cell with uvicorn.run . Click the new Public URL link that ends with ngrok.io","title":"Hello World"},{"location":"labs24-deployment-lesson/#docstrings-html","text":"Let\u2019s add a docstring and HTML response to our first endpoint: from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI() @app.get(\"/\") async def root(): \"\"\" Verifies the API is deployed, and links to the docs \"\"\" return HTMLResponse(\"\"\" <h1>Fake News Detector API</h1> <p>Go to <a href=\"/docs\">/docs</a> for documentation.</p> \"\"\") Re-launch your app. Go to docs -> GET.","title":"Docstrings, HTML"},{"location":"labs24-deployment-lesson/#post-request-endpoint","text":"Then add another endpoint, as a POST request: @app.post('/predict') async def predict(): \"\"\" Predicts whether a news article is real or fake news, based on its title Naive baseline: Always predicts 'fake' \"\"\" return { 'prediction': 'fake', 'probability': 0.50 } Re-launch your app. Go to docs -> POST -> Try it out -> Execute. According to FastAPI\u2019s tutorial , When you need to send data from a client (let\u2019s say, a browser) to your API, you send it as a request body . Let\u2019s set this up, following the tutorial instructions. import pandas as pd from pydantic import BaseModel class Story(BaseModel): title: str text: str @app.post('/predict') async def predict(story: Story): \"\"\" Predict whether a news article is real or fake news, based on its title & text Naive baseline: Always predicts 'fake' \"\"\" # Doesn't do anything with the request body yet, # just verifies we can read it. print(story) X = pd.DataFrame([dict(story)]) print(X.to_markdown()) return { 'prediction': 'fake', 'proobability': 0.50 } The code above shows how the request body object can be converted to a dictionary. Then, there are many ways to create Pandas DataFrames from lists and dictionaries . Re-launch your app. Go to docs -> POST -> Try it out -> Execute. Try to change the Request body, then Execute again. The request body is a JSON object, similar to a Python dictionary. What happens if you: Change values? (For example, set title \u2019s value to a different string.) Change value types? (For example, set title \u2019s value to an integer instead of a string.) Add key-value pairs? Remove key-value pairs? Reorder key-value pairs?","title":"POST request endpoint"},{"location":"labs24-deployment-lesson/#cors","text":"To ensure your team\u2019s web app can call your API, we\u2019ll configure \u201cCross-Origin Resource Sharing\u201d. According to FastAPI\u2019s tutorial , CORS or \u201cCross-Origin Resource Sharing\u201d refers to the situations when a frontend running in a browser has JavaScript code that communicates with a backend, and the backend is in a different \u201corigin\u201d than the frontend. Add this code to your app, following the tutorial instructions. from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI() app.add_middleware( CORSMiddleware, allow_origins=[\"*\"], allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"], )","title":"CORS"},{"location":"labs24-deployment-lesson/#learn-more","text":"To learn more about FastAPI: Watch these 8 short screencast videos Read the FastAPI docs Read Porting Flask to FastAPI for ML Model Serving","title":"Learn more"},{"location":"labs24-deployment-lesson/#deploy-baseline-to-aws","text":"","title":"Deploy baseline to AWS"},{"location":"labs24-deployment-lesson/#get-aws-account-access","text":"See Lambda Labs Student Handbook -> Product Engineering -> How do I request a new AWS account or get access to an existing account? Team Leads can work with Section Leads to request accounts, account access or account permissions. Note! There is only one region available for AWS accounts provided by Lambda School. That region is N. Virginia ( us-east-1 ). Please be sure to always work in that region. If you have permissions issues, please check that you are working in us-east-1.","title":"Get AWS account access"},{"location":"labs24-deployment-lesson/#get-aws-access-keys","text":"Understanding and getting your credentials - AWS General Reference explains, Access keys consist of two parts: an access key ID (for example, AKIAIOSFODNN7EXAMPLE) and a secret access key (for example, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). You use access keys to sign programmatic requests that you make to AWS if you use AWS CLI commands \u2026 To get access keys, follow the instructions in Managing Access Keys for IAM Users - AWS Identity and Access Management","title":"Get AWS access keys"},{"location":"labs24-deployment-lesson/#install-aws-eb-cli","text":"That\u2019s a lot of acronyms! AWS = Amazon Web Services EB = Elastic Beanstalk CLI = Command Line Interface Here\u2019s how I recommend you install AWS EB CLI: pip install pipx pipx ensurepath pipx install awsebcli eb --help I don\u2019t recommend using the AWS EB CLI setup scripts on GitHub , because it didn\u2019t work for me or for some students. Curious about pipx? You can learn more here: pipx docs My Python Development Environment, 2020 Edition | Jacob Kaplan-Moss","title":"Install AWS EB CLI"},{"location":"labs24-deployment-lesson/#make-github-repo","text":"Go to github.com/new to create a new GitHub repo. Give it any name. Check \"Initialize this repository with a README.\" Clone the repo to your local computer and change directories into it. git clone https://github.com/your-user-name/your-repo-name.git cd your-repo-name","title":"Make GitHub repo"},{"location":"labs24-deployment-lesson/#make-pipenv-environment","text":"pip install pipenv pipenv install fastapi uvicorn gunicorn pipenv shell","title":"Make pipenv environment"},{"location":"labs24-deployment-lesson/#make-mainpy","text":"Make a file named main.py and insert your FastAPI app code.","title":"Make main.py"},{"location":"labs24-deployment-lesson/#install-more-dependencies","text":"For example, so far our app uses pandas, plus a library called tabulate (for the to_markdown function). So we need to install these libraries in our virtual environment. pipenv install pandas tabulate","title":"Install more dependencies"},{"location":"labs24-deployment-lesson/#run-locally","text":"Run this command from the First Steps - FastAPI tutorial. uvicorn main:app --reload In your web browser, go to the URL where the uvicorn web server is running locally. For example, http://127.0.0.1:8000/","title":"Run locally"},{"location":"labs24-deployment-lesson/#make-procfile","text":"Make a file named Procfile and insert this line: web: gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker Curious about that Procfile? You can browse these technical references: https://fastapi.tiangolo.com/deployment/#alternatively-deploy-fastapi-without-docker https://www.uvicorn.org/#running-with-gunicorn https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/python-configuration-procfile.html","title":"Make Procfile"},{"location":"labs24-deployment-lesson/#git-commit","text":"git add --all git commit -am \"First commit\" git push origin master","title":"Git commit"},{"location":"labs24-deployment-lesson/#deploy-on-elastic-beanstalk","text":"We saw this message when we ran eb --help : To get started type \u201ceb init\u201d. Then type \u201ceb create\u201d and \u201ceb open\u201d We\u2019re ready to do that now. Use the following options when you run eb init : eb init --platform python-3.7 make-up-your-app-name --region us-east-1 The first time you run eb init , you will be asked for your AWS access key credentials. Then run these two commands: eb create make-up-your-environment-name eb open Congratulations, your baseline API is deployed to AWS! To update your app, push to GitHub, then run eb deploy .","title":"Deploy on Elastic Beanstalk"},{"location":"labs24-deployment-lesson/#clean-up","text":"If you deploy an app just for testing or learning, don\u2019t forget to \u201cclean up\u201d, to avoid surprise bills. The AWS Elastic Beanstalk docs explain, To ensure that you\u2019re not charged for any services you aren\u2019t using, delete all application versions and terminate the environment. Follow the instructions in the docs !","title":"Clean up"},{"location":"labs24-deployment-lesson/#develop-deploy-model","text":"Continue with this Colab notebook to develop a real model. Then pickle the model and use pipenv to install exact version numbers of all new dependencies. Test the app locally. Then push to GitHub, and run eb deploy .","title":"Develop &amp; deploy model"},{"location":"planning/","text":"Planning Contribute to Product Vision Document PVDs are at the product level \u2014 all tracks contribute to the product, so all students are required to work together on the PVD. While working on PVDs, students are exposed to the product management process and concepts like customer discovery and going from vision to planning. You will be a part of this process in your future workplaces and we find it very valuable for all students to be involved. Plans can be flexible and iterative. We don't expect DS students to stick to your original plan \u2014 but we do expect you to make one. President Eisenhower is famously quoted: \"In preparing for battle I have always found that plans are useless, but planning is indispensable.\" This is true of DS too! For the Technical Research and Architecture sections of the PVD, explore some options and make some initial hypotheses. But you'll be doing technical research and making architecture decisions all throughout your time in Labs. So you do not need to finalize these during the Planning phase. Identify user problems that DS can help solve Look for user problems that could be solved with any of these patterns: Automate tasks when you can't give step-by-step instructions, but you can give many labeled examples Predict or estimate uncertain information Give users personalized recommendations Refer to these additional resources: Google People + AI Guidebook: User Needs + Defining Success: Find the intersection of user needs & AI strengths . See bulleted lists: \"When AI is probably better\" versus \"When AI is probably not better.\" Building Machine Learning Powered Applications , PDF pages 23-32. Five Questions Data Science Answers Audit your data During the Planning phase, you are required to audit your data. What data do you have now? What data do you need, to solve the problem? What data can you get? You could make a table that looks something like this: Size Features Labels What data do you have? What do you need? What can you get? Then fill in the table to answer the questions and complete your data audit. Refer to these resources: Google People + AI Guidebook: Data Collection + Evaluation Building Machine Learning Powered Applications , PDF pages 33-35. You may have heard that we don't write code in Labs during the Planning phase. This is generally true. However, DS is permitted and expected to write some code to do your data audit and identify DS opportunities. This will be exploratory code, probably in notebooks. You probably won't use any of this code in production for the solution you deliver. Choose DS problem(s) to work on You will choose at least one user feature to help build with Data Science. DS teams will probably deliver fewer features than Web teams during Labs. For example, Web may release three features in cycle 1, then three more features in cycle 2. But DS may work on a single user feature across both cycles. This is accepted and expected! You will list your user feature(s) in the Product Vision Document for your project, and in the Release Canvas documents for each cycle. The Release Canvas template also asks for a Lo-fi prototype (mockup) for each feature. DS students should help make mockups. Refer to these resources: Building Machine Learning Powered Applications , PDF pages 21-22. Stakeholder-Driven Data Science @ 6:40 (\"First example, retail site selection ... We start with mockups.\")","title":"Planning"},{"location":"planning/#planning","text":"","title":"Planning"},{"location":"planning/#contribute-to-product-vision-document","text":"PVDs are at the product level \u2014 all tracks contribute to the product, so all students are required to work together on the PVD. While working on PVDs, students are exposed to the product management process and concepts like customer discovery and going from vision to planning. You will be a part of this process in your future workplaces and we find it very valuable for all students to be involved. Plans can be flexible and iterative. We don't expect DS students to stick to your original plan \u2014 but we do expect you to make one. President Eisenhower is famously quoted: \"In preparing for battle I have always found that plans are useless, but planning is indispensable.\" This is true of DS too! For the Technical Research and Architecture sections of the PVD, explore some options and make some initial hypotheses. But you'll be doing technical research and making architecture decisions all throughout your time in Labs. So you do not need to finalize these during the Planning phase.","title":"Contribute to Product Vision Document"},{"location":"planning/#identify-user-problems-that-ds-can-help-solve","text":"Look for user problems that could be solved with any of these patterns: Automate tasks when you can't give step-by-step instructions, but you can give many labeled examples Predict or estimate uncertain information Give users personalized recommendations Refer to these additional resources: Google People + AI Guidebook: User Needs + Defining Success: Find the intersection of user needs & AI strengths . See bulleted lists: \"When AI is probably better\" versus \"When AI is probably not better.\" Building Machine Learning Powered Applications , PDF pages 23-32. Five Questions Data Science Answers","title":"Identify user problems that DS can help solve"},{"location":"planning/#audit-your-data","text":"During the Planning phase, you are required to audit your data. What data do you have now? What data do you need, to solve the problem? What data can you get? You could make a table that looks something like this: Size Features Labels What data do you have? What do you need? What can you get? Then fill in the table to answer the questions and complete your data audit. Refer to these resources: Google People + AI Guidebook: Data Collection + Evaluation Building Machine Learning Powered Applications , PDF pages 33-35. You may have heard that we don't write code in Labs during the Planning phase. This is generally true. However, DS is permitted and expected to write some code to do your data audit and identify DS opportunities. This will be exploratory code, probably in notebooks. You probably won't use any of this code in production for the solution you deliver.","title":"Audit your data"},{"location":"planning/#choose-ds-problems-to-work-on","text":"You will choose at least one user feature to help build with Data Science. DS teams will probably deliver fewer features than Web teams during Labs. For example, Web may release three features in cycle 1, then three more features in cycle 2. But DS may work on a single user feature across both cycles. This is accepted and expected! You will list your user feature(s) in the Product Vision Document for your project, and in the Release Canvas documents for each cycle. The Release Canvas template also asks for a Lo-fi prototype (mockup) for each feature. DS students should help make mockups. Refer to these resources: Building Machine Learning Powered Applications , PDF pages 21-22. Stakeholder-Driven Data Science @ 6:40 (\"First example, retail site selection ... We start with mockups.\")","title":"Choose DS problem(s) to work on"},{"location":"process/","text":"DS process CRISP-DM CRISP-DM (Cross-industry standard process for data mining) Business Understanding Data Understanding Data Preparation Modeling Evaluation Deployment Building Machine-Learning Powered Applications Emmanuel Ameisen, Building Machine Learning Powered Applications: Going from Idea to Product , PDF pages 15\u201416: The road from an idea to a deployed ML application is long and winding. After seeing many companies and individuals build such projects, I\u2019ve identified four key successive stages ... Identifying the right ML approach ... set the right success criteria ... identify an adequate initial dataset ... Building an initial prototype ... to tackle the product goal with no ML involved ... Iterating on models Deployment and monitoring Max Shron Stakeholder-Driven Data Science CoNVO: Context, Need, Vision, Outcome Renee Teate Francois Chollet Google People + AI Agile Data Science","title":"DS process"},{"location":"process/#ds-process","text":"","title":"DS process"},{"location":"process/#crisp-dm","text":"CRISP-DM (Cross-industry standard process for data mining) Business Understanding Data Understanding Data Preparation Modeling Evaluation Deployment","title":"CRISP-DM"},{"location":"process/#building-machine-learning-powered-applications","text":"Emmanuel Ameisen, Building Machine Learning Powered Applications: Going from Idea to Product , PDF pages 15\u201416: The road from an idea to a deployed ML application is long and winding. After seeing many companies and individuals build such projects, I\u2019ve identified four key successive stages ... Identifying the right ML approach ... set the right success criteria ... identify an adequate initial dataset ... Building an initial prototype ... to tackle the product goal with no ML involved ... Iterating on models Deployment and monitoring","title":"Building Machine-Learning Powered Applications"},{"location":"process/#max-shron","text":"Stakeholder-Driven Data Science CoNVO: Context, Need, Vision, Outcome","title":"Max Shron"},{"location":"process/#renee-teate","text":"","title":"Renee Teate"},{"location":"process/#francois-chollet","text":"","title":"Francois Chollet"},{"location":"process/#google-people-ai","text":"","title":"Google People + AI"},{"location":"process/#agile-data-science","text":"","title":"Agile Data Science"},{"location":"release-canvas-examples/","text":"DS Release Canvas examples Allay Description The Labs 23 team started with this description from the Product Vision Document: Identify user problems that DS can help solve This can be hard, especially for greenfield projects. The team struggled at first, but asked for help, and we found a good opportunity together: Data audit During the Planning phase, you\u2019re required to audit your data. What data do you have now? What data do you need, to solve the problem? What data can you get? You could make a table that looks something like this: Refer to these resources to help with your data audit: Google People + AI Guidebook: Data Collection + Evaluation Building Machine Learning Powered Applications , PDF pages 33-35. You may have heard that we don\u2019t write code in Labs during the Planning phase. This is generally true. However, DS is expected to write some code to do your data audit and identify DS opportunities. DS Release Canvas 1 This example is good overall, but it\u2019s missing two requirements for DS RC1: Deploy baseline API Define how you measure success. DS Release Canvas 2 DS teams will probably deliver fewer features than Web teams during Labs. For example, Web may release three features in cycle 1, then three more features in cycle 2. But DS may work on a single user feature across both cycles. This is accepted and expected! The Labs 23 Allay DS team plans to work on the same problem and solution, but with different key results: They created their lo-fi mockup with Excalidraw Refer to these resources for help with your lo-fi mockups: Building Machine Learning Powered Applications , PDF pages 21-22. Stakeholder-Driven Data Science @ 6:40 (\u201cFirst example, retail site selection \u2026 We start with mockups.\u201d) Web Release Canvas DS and Web need to collaborate together. This Web RC has great OKRs! But it should be more explicit about integrating the DS API. BetterReads Description Data Audit DS Release Canvas 1 Notice that RC1 does include \u201cdeploy baseline API\u201d. This is a requirement. Because this is a build-on project, the team plans to resolve open issues on GitHub. This is a good idea! Define how you\u2019ll measure success By the end of cycle 1, you must define how you\u2019ll measure the success of your model. It\u2019s not easy, especially if your model is unsupervised and your data is unlabeled! This team did a great job coming up with a creative solution: DS Release Canvas 2 DS RC1 had one user story: \u201cI want to receive book recommendations.\u201d The team could reuse the same use story for RC2. But they chose to rephrase it as \u201cI want my book recommendations to be more accurate.\u201d That\u2019s good too! DS Release Canvas 3 If you have time, you can continue to iterate on your model, or work on new user features. Citrics Description Data audit You aren\u2019t required to make a detailed \u201cdata dictionary\u201d during the planning phase, but it could be helpful to have at some point! DS Release Canvas 1 DS Release Canvas 3 Groa PVD DS Release Canvas API documentation","title":"DS Release Canvas examples"},{"location":"release-canvas-examples/#ds-release-canvas-examples","text":"","title":"DS Release Canvas examples"},{"location":"release-canvas-examples/#allay","text":"","title":"Allay"},{"location":"release-canvas-examples/#description","text":"The Labs 23 team started with this description from the Product Vision Document:","title":"Description"},{"location":"release-canvas-examples/#identify-user-problems-that-ds-can-help-solve","text":"This can be hard, especially for greenfield projects. The team struggled at first, but asked for help, and we found a good opportunity together:","title":"Identify user problems that DS can help solve"},{"location":"release-canvas-examples/#data-audit","text":"During the Planning phase, you\u2019re required to audit your data. What data do you have now? What data do you need, to solve the problem? What data can you get? You could make a table that looks something like this: Refer to these resources to help with your data audit: Google People + AI Guidebook: Data Collection + Evaluation Building Machine Learning Powered Applications , PDF pages 33-35. You may have heard that we don\u2019t write code in Labs during the Planning phase. This is generally true. However, DS is expected to write some code to do your data audit and identify DS opportunities.","title":"Data audit"},{"location":"release-canvas-examples/#ds-release-canvas-1","text":"This example is good overall, but it\u2019s missing two requirements for DS RC1: Deploy baseline API Define how you measure success.","title":"DS Release Canvas 1"},{"location":"release-canvas-examples/#ds-release-canvas-2","text":"DS teams will probably deliver fewer features than Web teams during Labs. For example, Web may release three features in cycle 1, then three more features in cycle 2. But DS may work on a single user feature across both cycles. This is accepted and expected! The Labs 23 Allay DS team plans to work on the same problem and solution, but with different key results: They created their lo-fi mockup with Excalidraw Refer to these resources for help with your lo-fi mockups: Building Machine Learning Powered Applications , PDF pages 21-22. Stakeholder-Driven Data Science @ 6:40 (\u201cFirst example, retail site selection \u2026 We start with mockups.\u201d)","title":"DS Release Canvas 2"},{"location":"release-canvas-examples/#web-release-canvas","text":"DS and Web need to collaborate together. This Web RC has great OKRs! But it should be more explicit about integrating the DS API.","title":"Web Release Canvas"},{"location":"release-canvas-examples/#betterreads","text":"","title":"BetterReads"},{"location":"release-canvas-examples/#description_1","text":"","title":"Description"},{"location":"release-canvas-examples/#data-audit_1","text":"","title":"Data Audit"},{"location":"release-canvas-examples/#ds-release-canvas-1_1","text":"Notice that RC1 does include \u201cdeploy baseline API\u201d. This is a requirement. Because this is a build-on project, the team plans to resolve open issues on GitHub. This is a good idea!","title":"DS Release Canvas 1"},{"location":"release-canvas-examples/#define-how-youll-measure-success","text":"By the end of cycle 1, you must define how you\u2019ll measure the success of your model. It\u2019s not easy, especially if your model is unsupervised and your data is unlabeled! This team did a great job coming up with a creative solution:","title":"Define how you\u2019ll measure success"},{"location":"release-canvas-examples/#ds-release-canvas-2_1","text":"DS RC1 had one user story: \u201cI want to receive book recommendations.\u201d The team could reuse the same use story for RC2. But they chose to rephrase it as \u201cI want my book recommendations to be more accurate.\u201d That\u2019s good too!","title":"DS Release Canvas 2"},{"location":"release-canvas-examples/#ds-release-canvas-3","text":"If you have time, you can continue to iterate on your model, or work on new user features.","title":"DS Release Canvas 3"},{"location":"release-canvas-examples/#citrics","text":"","title":"Citrics"},{"location":"release-canvas-examples/#description_2","text":"","title":"Description"},{"location":"release-canvas-examples/#data-audit_2","text":"You aren\u2019t required to make a detailed \u201cdata dictionary\u201d during the planning phase, but it could be helpful to have at some point!","title":"Data audit"},{"location":"release-canvas-examples/#ds-release-canvas-1_2","text":"DS Release Canvas 3","title":"DS Release Canvas 1"},{"location":"release-canvas-examples/#groa","text":"PVD DS Release Canvas API documentation","title":"Groa"}]}